{"version":3,"file":"static/js/931.a130edaf.chunk.js","mappings":"gVAmHA,EArGkB,WAAO,IAAD,IACtB,GAKIA,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACaC,EAFf,EAEEC,UAAaD,OACbE,EAHF,EAGEA,aACAC,EAJF,EAIEA,MAEIC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACxBC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,gCACGH,IAAcH,IACb,SAAC,IAAD,CACEO,QAAQ,OACRC,WAAW,OACXC,YAAY,OACZC,UAAU,OACVC,MAAM,SACNC,KAAK,KACLC,UAAU,MACVC,MAAM,QACNC,WAAW,cAGbZ,IACA,SAAC,KAAD,CAAKI,QAAQ,OAAOS,eAAe,SAAnC,UACE,UAAC,KAAD,CACEC,GAAG,OACHC,MAAM,QACNC,SAAUrB,GAzBG,SAAAsB,GACrBf,GAASgB,EAAAA,EAAAA,IAAUD,IACnBrB,GACD,IAmBO,WAKE,UAAC,IAAD,CAAWuB,mBAAiB,EAA5B,mBAEE,SAAC,EAAAC,GAAD,QACEC,QAAQ,SACRZ,KAAK,KACLa,KAAK,SACD9B,EAAS,QAAS,CACpB+B,SAAU,yBACVC,QAAS,CACPC,MAAO,8CACPC,QAAS,uCAKV,OAANjC,QAAM,IAANA,OAAA,EAAAA,EAAQkC,SACP,SAAC,IAAD,CAAMC,SAAS,OAAOpB,MAAM,MAA5B,gBACGf,QADH,IACGA,GADH,UACGA,EAAQkC,aADX,aACG,EAAeD,WAGpB,UAAC,IAAD,CAAWP,mBAAiB,EAA5B,sBAEE,SAAC,EAAAC,GAAD,QACEC,QAAQ,SACRZ,KAAK,KACLa,KAAK,YACD9B,EAAS,WAAY,CACvB+B,SAAU,yBACVM,UAAW,CACTJ,MAAO,EACPC,QAAS,+CAKV,OAANjC,QAAM,IAANA,OAAA,EAAAA,EAAQqC,YACP,SAAC,IAAD,CAAMF,SAAS,OAAOpB,MAAM,MAA5B,gBACGf,QADH,IACGA,GADH,UACGA,EAAQqC,gBADX,aACG,EAAkBJ,UAGtB7B,IACC,SAAC,KAAD,CAAKW,MAAM,MAAMuB,OAAO,OAAxB,0CAIF,SAAC,IAAD,CACE3B,QAAQ,OACRC,WAAW,OACXC,YAAY,OACZG,KAAK,KACLuB,YAAY,SACZX,QAAQ,QACRC,KAAK,SAPP,2BAgBX,EC3GD,EAJc,WACZ,OAAO,SAAC,EAAD,GACR,C","sources":["components/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useForm } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectError, selectLoading } from '../redux/auth/authSelectors';\r\nimport { logInUser } from '../redux/auth/authOperations';\r\nimport { Spinner } from '@chakra-ui/react';\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Text,\r\n  Button,\r\n} from '@chakra-ui/react';\r\n\r\nconst LoginFrom = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm();\r\n  const error = useSelector(selectError);\r\n  const isLoading = useSelector(selectLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  const onHandleSubmit = data => {\r\n    dispatch(logInUser(data));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading && !error && (\r\n        <Spinner\r\n          display=\"flex\"\r\n          marginLeft=\"auto\"\r\n          marginRight=\"auto\"\r\n          marginTop=\"80px\"\r\n          color=\"tomato\"\r\n          size=\"xl\"\r\n          thickness=\"4px\"\r\n          speed=\"0.65s\"\r\n          emptyColor=\"gray.200\"\r\n        />\r\n      )}\r\n      {!isLoading && (\r\n        <Box display=\"flex\" justifyContent=\"center\">\r\n          <FormControl\r\n            as=\"form\"\r\n            width=\"400px\"\r\n            onSubmit={handleSubmit(onHandleSubmit)}\r\n          >\r\n            <FormLabel requiredIndicator>\r\n              Email\r\n              <Input\r\n                variant=\"filled\"\r\n                size=\"md\"\r\n                type=\"email\"\r\n                {...register('email', {\r\n                  required: 'The field is required!',\r\n                  pattern: {\r\n                    value: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                    message: 'Please enter correct email!',\r\n                  },\r\n                })}\r\n              />\r\n            </FormLabel>\r\n            {errors?.email && (\r\n              <Text fontSize=\"15px\" color=\"red\">\r\n                {errors?.email?.message}\r\n              </Text>\r\n            )}\r\n            <FormLabel requiredIndicator>\r\n              Password\r\n              <Input\r\n                variant=\"filled\"\r\n                size=\"md\"\r\n                type=\"password\"\r\n                {...register('password', {\r\n                  required: 'The field is required!',\r\n                  minLength: {\r\n                    value: 8,\r\n                    message: 'At least 8 characters are required!',\r\n                  },\r\n                })}\r\n              />\r\n            </FormLabel>\r\n            {errors?.password && (\r\n              <Text fontSize=\"15px\" color=\"red\">\r\n                {errors?.password?.message}\r\n              </Text>\r\n            )}\r\n            {error && (\r\n              <Box color=\"red\" height=\"50px\">\r\n                Email or password is wrong!\r\n              </Box>\r\n            )}\r\n            <Button\r\n              display=\"flex\"\r\n              marginLeft=\"auto\"\r\n              marginRight=\"auto\"\r\n              size=\"lg\"\r\n              colorScheme=\"purple\"\r\n              variant=\"solid\"\r\n              type=\"submit\"\r\n            >\r\n              Log In\r\n            </Button>\r\n          </FormControl>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginFrom;\r\n","import LoginFrom from '../components/LoginForm';\r\n\r\nconst Login = () => {\r\n  return <LoginFrom />;\r\n};\r\n\r\nexport default Login;\r\n"],"names":["useForm","register","errors","formState","handleSubmit","reset","error","useSelector","selectError","isLoading","selectLoading","dispatch","useDispatch","display","marginLeft","marginRight","marginTop","color","size","thickness","speed","emptyColor","justifyContent","as","width","onSubmit","data","logInUser","requiredIndicator","I","variant","type","required","pattern","value","message","email","fontSize","minLength","password","height","colorScheme"],"sourceRoot":""}