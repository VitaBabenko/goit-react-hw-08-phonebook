{"version":3,"file":"static/js/724.beac3c9f.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/contactForm/ContactForm.styled.jsx","components/contactForm/ContactForm.jsx","components/contactListItem/ContactListItem.styled.jsx","components/contactListItem/ContactListItem.jsx","components/contactList/ContactList.styled.jsx","components/contactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const selectContacts = state => state.contacts.items;\r\n\r\nexport const selectIsLoading = state => state.contacts.isLoading;\r\n\r\nexport const selectError = state => state.contacts.error;\r\n\r\n// export const selectFilter = state => state.filter;\r\n\r\n// export const selectVisibleContacts = createSelector(\r\n//   [selectContacts, selectFilter],\r\n//   (contacts, filter) => {\r\n//     return contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\r\n//     );\r\n//   }\r\n// );\r\n","import styled from 'styled-components';\r\nimport {\r\n  Form as FormikForm,\r\n  ErrorMessage as FormikError,\r\n  Field as InputField,\r\n} from 'formik';\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  color: #800080;\r\n`;\r\n\r\nexport const Form = styled(FormikForm)`\r\n  border: 2px solid #800080;\r\n  border-radius: 10px;\r\n  padding: 15px;\r\n  width: 100%;\r\n\r\n  @media (min-width: 768px) {\r\n    width: 400px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n`;\r\n\r\nexport const FormField = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  width: 250px;\r\n  color: #800080;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-bottom: 25px;\r\n`;\r\n\r\nexport const Field = styled(InputField)`\r\n  border-color: #800080;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const Btn = styled.button`\r\n  display: block;\r\n  align-content: center;\r\n  padding: 10px 20px;\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  color: #800080;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border-color: #800080;\r\n  border-radius: 10px;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #ff00ff;\r\n  }\r\n`;\r\n\r\nexport const ErrorMessage = styled(FormikError)`\r\n  color: red;\r\n  width: 100%;\r\n`;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/operations';\r\nimport { selectContacts } from '../../redux/contacts/selectors';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  Title,\r\n  Form,\r\n  FormField,\r\n  Field,\r\n  Btn,\r\n  ErrorMessage,\r\n} from './ContactForm.styled';\r\n\r\nconst ContactSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .required('Required')\r\n    .matches(\r\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n      'Name may contain only letters, apostrophe, dash and spaces!'\r\n    ),\r\n  number: Yup.string()\r\n    .required('Required')\r\n    .matches(\r\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +!'\r\n    ),\r\n});\r\n\r\nexport const ContactForm = () => {\r\n  const contacts = useSelector(selectContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleFormSubmit = (values, actions) => {\r\n    contacts.filter(\r\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\r\n    ).length\r\n      ? toast.error(`${values.name} is already in contacts!`)\r\n      : dispatch(addContact(values));\r\n    actions.resetForm();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Title>Phonebook</Title>\r\n      <Formik\r\n        initialValues={{\r\n          name: '',\r\n          number: '',\r\n        }}\r\n        validationSchema={ContactSchema}\r\n        onSubmit={handleFormSubmit}\r\n      >\r\n        <Form>\r\n          <FormField>\r\n            Name\r\n            <Field name=\"name\" type=\"text\" />\r\n            <ErrorMessage name=\"name\" component=\"span\" />\r\n          </FormField>\r\n          <FormField>\r\n            Number\r\n            <Field name=\"number\" type=\"tel\" />\r\n            <ErrorMessage name=\"number\" component=\"span\" />\r\n          </FormField>\r\n          <Btn type=\"submit\">Add contact</Btn>\r\n        </Form>\r\n      </Formik>\r\n      <Toaster toastOptions={{ duration: 3000 }} />\r\n    </>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Name = styled.p`\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  color: #800080;\r\n`;\r\n\r\nexport const Tel = styled.p`\r\n  font-size: 18px;\r\n  color: #800080;\r\n`;\r\n\r\nexport const Btn = styled.button`\r\n  display: block;\r\n  align-content: center;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  padding: 3px 8px;\r\n  color: #800080;\r\n  border-color: #800080;\r\n  border-radius: 10px;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #ff00ff;\r\n  }\r\n`;\r\n","import { useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/operations';\r\nimport PropTypes from 'prop-types';\r\nimport { Name, Tel, Btn } from './ContactListItem.styled';\r\n\r\nexport const ContactListItem = ({ contact: { id, name, number } }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Name>{name} :</Name>\r\n      <Tel>{number}</Tel>\r\n      <Btn type=\"button\" onClick={() => dispatch(deleteContact(id))}>\r\n        Delete\r\n      </Btn>\r\n    </>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Title = styled.h2`\r\n  margin-top: 30px;\r\n  text-align: center;\r\n  color: #800080;\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  margin-top: 20px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n\r\n  @media (min-width: 768px) {\r\n    max-width: 700px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    padding-left: 40px;\r\n    padding-right: 40px;\r\n  }\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { selectContacts } from '../../redux/contacts/selectors';\r\n// import { Filter } from '../filter/Filter';\r\nimport { ContactListItem } from '../contactListItem/ContactListItem';\r\nimport { Title, List, ListItem } from './ContactList.styled';\r\n\r\nexport const ContactList = () => {\r\n  const contacts = useSelector(selectContacts);\r\n\r\n  return (\r\n    <>\r\n      <Title>Contacts</Title>\r\n      {/* <Filter /> */}\r\n      <List>\r\n        {contacts.map(contact => {\r\n          return (\r\n            <ListItem key={contact.id}>\r\n              <ContactListItem contact={contact} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchContacts } from '../redux/contacts/operations';\r\nimport { ContactForm } from '../components/contactForm/ContactForm';\r\nimport { Loader } from '../components/Loader';\r\nimport { ContactList } from '../components/contactList/ContactList';\r\nimport { selectIsLoading, selectError } from '../redux/contacts/selectors';\r\n\r\nconst ContactsPage = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(selectIsLoading);\r\n  const error = useSelector(selectError);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <ContactForm />\r\n      {isLoading && !error && <Loader />}\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","Title","styled","Form","FormikForm","FormField","Field","InputField","Btn","ErrorMessage","FormikError","ContactSchema","Yup","shape","name","required","matches","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","filter","contact","toLowerCase","length","toast","addContact","resetForm","type","component","toastOptions","duration","Name","Tel","ContactListItem","id","onClick","deleteContact","List","ListItem","ContactList","map","useEffect","fetchContacts","Loader"],"sourceRoot":""}