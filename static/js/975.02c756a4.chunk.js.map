{"version":3,"file":"static/js/975.02c756a4.chunk.js","mappings":"uUA4HA,EA/GqB,WAAO,IAAD,MACzB,GAKIA,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACaC,EAFf,EAEEC,UAAaD,OACbE,EAHF,EAGEA,aACAC,EAJF,EAIEA,MAEIC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,+BACE,SAAC,KAAD,CAAKC,QAAQ,OAAOC,eAAe,SAAnC,UACE,UAAC,KAAD,CACEC,GAAG,OACHC,MAAM,QACNC,SAAUb,GAXK,SAAAc,GACrBP,GAASQ,EAAAA,EAAAA,IAAaD,IACtBb,GACD,IAKK,WAKE,UAAC,IAAD,CAAWe,mBAAiB,EAA5B,sBAEE,SAAC,EAAAC,GAAD,QACEC,QAAQ,SACRC,KAAK,KACLC,KAAK,QACDvB,EAAS,OAAQ,CACnBwB,SAAU,yBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,uCAEXC,QAAS,CACPF,MACE,yHACFC,QACE,uEAKH,OAAN1B,QAAM,IAANA,OAAA,EAAAA,EAAQ4B,QACP,SAAC,IAAD,CAAMC,SAAS,OAAOC,MAAM,MAA5B,gBACG9B,QADH,IACGA,GADH,UACGA,EAAQ4B,YADX,aACG,EAAcF,WAGnB,UAAC,IAAD,CAAWR,mBAAiB,EAA5B,mBAEE,SAAC,EAAAC,GAAD,QACEC,QAAQ,SACRC,KAAK,KACLC,KAAK,SACDvB,EAAS,QAAS,CACpBwB,SAAU,yBACVI,QAAS,CACPF,MAAO,8CACPC,QAAS,uCAKV,OAAN1B,QAAM,IAANA,OAAA,EAAAA,EAAQ+B,SACP,SAAC,IAAD,CAAMF,SAAS,OAAOC,MAAM,MAA5B,gBACG9B,QADH,IACGA,GADH,UACGA,EAAQ+B,aADX,aACG,EAAeL,WAGpB,UAAC,IAAD,CAAWR,mBAAiB,EAA5B,sBAEE,SAAC,EAAAC,GAAD,QACEC,QAAQ,SACRC,KAAK,KACLC,KAAK,YACDvB,EAAS,WAAY,CACvBwB,SAAU,yBACVC,UAAW,CACTC,MAAO,EACPC,QAAS,+CAKV,OAAN1B,QAAM,IAANA,OAAA,EAAAA,EAAQgC,YACP,SAAC,IAAD,CAAMH,SAAS,OAAOC,MAAM,MAA5B,gBACG9B,QADH,IACGA,GADH,UACGA,EAAQgC,gBADX,aACG,EAAkBN,UAGtBnB,IAAS,yEACE,IAAXH,IACC,uFAEF,SAAC,IAAD,CACEO,QAAQ,OACRsB,WAAW,OACXC,YAAY,OACZZ,KAAK,SACLD,KAAK,KACLc,YAAY,SACZf,QAAQ,QAPV,4BAeT,ECpHD,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C","sources":["components/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registerUser } from '../redux/auth/authOperations';\r\nimport { selectVerify, selectError } from '../redux/auth/authSelectors';\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Text,\r\n  Button,\r\n} from '@chakra-ui/react';\r\n\r\nconst RegisterForm = () => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm();\r\n  const verify = useSelector(selectVerify);\r\n  const error = useSelector(selectError);\r\n  const dispatch = useDispatch();\r\n\r\n  const onHandleSubmit = data => {\r\n    dispatch(registerUser(data));\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box display=\"flex\" justifyContent=\"center\">\r\n        <FormControl\r\n          as=\"form\"\r\n          width=\"400px\"\r\n          onSubmit={handleSubmit(onHandleSubmit)}\r\n        >\r\n          <FormLabel requiredIndicator>\r\n            Username\r\n            <Input\r\n              variant=\"filled\"\r\n              size=\"md\"\r\n              type=\"text\"\r\n              {...register('name', {\r\n                required: 'The field is required!',\r\n                minLength: {\r\n                  value: 2,\r\n                  message: 'At least 2 characters are required!',\r\n                },\r\n                pattern: {\r\n                  value:\r\n                    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n                  message:\r\n                    'Name may contain only letters, apostrophe, dash and spaces!',\r\n                },\r\n              })}\r\n            />\r\n          </FormLabel>\r\n          {errors?.name && (\r\n            <Text fontSize=\"15px\" color=\"red\">\r\n              {errors?.name?.message}\r\n            </Text>\r\n          )}\r\n          <FormLabel requiredIndicator>\r\n            Email\r\n            <Input\r\n              variant=\"filled\"\r\n              size=\"md\"\r\n              type=\"email\"\r\n              {...register('email', {\r\n                required: 'The field is required!',\r\n                pattern: {\r\n                  value: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                  message: 'Please enter correct email!',\r\n                },\r\n              })}\r\n            />\r\n          </FormLabel>\r\n          {errors?.email && (\r\n            <Text fontSize=\"15px\" color=\"red\">\r\n              {errors?.email?.message}\r\n            </Text>\r\n          )}\r\n          <FormLabel requiredIndicator>\r\n            Password\r\n            <Input\r\n              variant=\"filled\"\r\n              size=\"md\"\r\n              type=\"password\"\r\n              {...register('password', {\r\n                required: 'The field is required!',\r\n                minLength: {\r\n                  value: 8,\r\n                  message: 'At least 8 characters are required!',\r\n                },\r\n              })}\r\n            />\r\n          </FormLabel>\r\n          {errors?.password && (\r\n            <Text fontSize=\"15px\" color=\"red\">\r\n              {errors?.password?.message}\r\n            </Text>\r\n          )}\r\n          {error && <h1>User with this email is already registered!</h1>}\r\n          {verify === false && (\r\n            <h1>Please, visit your email address and active your account!</h1>\r\n          )}\r\n          <Button\r\n            display=\"flex\"\r\n            marginLeft=\"auto\"\r\n            marginRight=\"auto\"\r\n            type=\"submit\"\r\n            size=\"lg\"\r\n            colorScheme=\"purple\"\r\n            variant=\"solid\"\r\n          >\r\n            Register\r\n          </Button>\r\n        </FormControl>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import RegisterForm from '../components/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return <RegisterForm />;\r\n};\r\n\r\nexport default RegisterPage;\r\n"],"names":["useForm","register","errors","formState","handleSubmit","reset","verify","useSelector","selectVerify","error","selectError","dispatch","useDispatch","display","justifyContent","as","width","onSubmit","data","registerUser","requiredIndicator","I","variant","size","type","required","minLength","value","message","pattern","name","fontSize","color","email","password","marginLeft","marginRight","colorScheme"],"sourceRoot":""}